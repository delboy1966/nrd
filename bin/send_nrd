#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Std;
use IO::Socket;
use NRD::Packet;
use NRD::Serialize;

my %opts;
getopts('c:', \%opts) || die "Incorrect options";
my $conf_file = $opts{'c'} || '/etc/send_nrd.cfg';
my ($host, $port);
my $conf = {};
{
  local *CONF;
  open CONF, "<", $conf_file or next;
  while (my $line = <CONF>){
    chomp $line;
    next if ($line =~ m/^\s*#/);
    next if ($line =~ m/^\s*$/);
    $line =~ s/^\s*(\w+)\s+(.{1,}?)\s*$/$conf->{$1} = $2;/ge;
  }
}

$host = $conf->{'host'} ||= 'localhost';
$port = $conf->{'port'} ||= 5669;

$conf->{'serializer'}   ||= 'none';
$conf->{'encrypt_type'} ||= '';
$conf->{'encrypt_key'}  ||= '';

#
#use Data::Dumper;
#print Dumper($conf, $host, $port);
#
my $serializer = NRD::Serialize->instance_of(lc($conf->{'serializer'}), $conf);

my $sock = IO::Socket::INET->new(PeerAddr => $host,
                                 PeerPort => $port,
                                 Proto    => 'tcp',
                                 ) || die "Can't connect [$!]";
$sock->autoflush(1);

my $packer = NRD::Packet->new();
if ($serializer->needs_helo){
  print $sock $packer->pack($serializer->helo);
}

while (my $line = <STDIN>){
  chomp $line;
  my $r = {
    'time' => time(),
    %{ $serializer->from_line($line) }
  };
  print $sock $packer->pack($serializer->freeze($r));
}
print $sock "END\n";

my $response = <$sock>;
close $sock;

if (! defined $response) {
  print "No response from server\n";
  exit 1;
}

chomp $response;
if ($response ne "DONE") {
  print "Bad response from server: $response\n";
  exit 1;
}

exit;
